program: ($) => choice(
  seq($.semis, $.MODULE, $.modulepath, $.moduledecl, ),
  $.moduledecl,
),
moduledecl: ($) => choice(
  seq("{", $.semis, $.imports, "}", $.semis, ),
  seq($.semis, $.imports, ),
),
imports: ($) => choice(
  seq($.importdecl, $.semis1, $.imports, ),
  $.eimports,
),
eimports: ($) => choice(
  seq($.IMPORT_EXTERN, $.externimpbody, $.semis1, $.eimports, ),
  $.declarations,
),
importdecl: ($) => choice(
  seq($.pub, $.IMPORT, $.modulepath, ),
  seq($.pub, $.IMPORT, $.modulepath, "=", $.modulepath, ),
),
modulepath: ($) => choice(
  $.varid,
  $.qvarid,
),
pub: ($) => optional($.PUB),
semis1: ($) => choice(
  seq($.semis1, $.semi, ),
  $.semi,
),
semis: ($) => optional(seq($.semis, $.semi, )),
semi: ($) => choice(
  ";",
  $.INSERTED_SEMI,
),
declarations: ($) => choice(
  seq($.fixitydecl, $.semis1, $.declarations, ),
  $.topdecls,
),
fixitydecl: ($) => seq($.pub, $.fixity, $.oplist1, ),
fixity: ($) => choice(
  seq($.INFIX, $.INT, ),
  seq($.INFIXR, $.INT, ),
  seq($.INFIXL, $.INT, ),
),
oplist1: ($) => choice(
  seq($.oplist1, ",", $.identifier, ),
  $.identifier,
),
topdecls: ($) => optional($.topdecls1),
topdecls1: ($) => choice(
  seq($.topdecls1, $.topdecl, $.semis1, ),
  seq($.topdecl, $.semis1, ),
  seq($.topdecls1, $.error, $.semis1, ),
  seq($.error, $.semis1, ),
),
topdecl: ($) => choice(
  seq($.pub, $.puredecl, ),
  seq($.pub, $.aliasdecl, ),
  seq($.pub, $.externdecl, ),
  seq($.pub, $.typedecl, ),
  seq($.ABSTRACT, $.typedecl, ),
),
externdecl: ($) => seq($.inlinemod, $.fipmod, $.EXTERN, $.qidentifier, $.externtype, $.externbody, ),
externtype: ($) => choice(
  seq(":", $.typescheme, ),
  seq($.typeparams, "(", $.parameters, ")", $.annotres, ),
),
externbody: ($) => choice(
  seq("{", $.semis, $.externstats1, "}", ),
  seq("{", $.semis, "}", ),
),
externstats1: ($) => choice(
  seq($.externstats1, $.externstat, $.semis1, ),
  seq($.externstat, $.semis1, ),
),
externstat: ($) => choice(
  seq($.externtarget, $.externinline, $.STRING, ),
  seq($.externinline, $.STRING, ),
),
externinline: ($) => optional($.ID_INLINE),
externimpbody: ($) => choice(
  seq("=", $.externimp, ),
  seq("{", $.semis, $.externimps1, "}", ),
),
externimps1: ($) => choice(
  seq($.externimps1, $.externimp, $.semis1, ),
  seq($.externimp, $.semis1, ),
),
externimp: ($) => choice(
  seq($.externtarget, $.varid, $.STRING, ),
  seq($.externtarget, "{", $.externvals1, "}", ),
),
externvals1: ($) => choice(
  seq($.externvals1, $.externval, $.semis1, ),
  seq($.externval, $.semis1, ),
),
externval: ($) => seq($.varid, "=", $.STRING, ),
externtarget: ($) => choice(
  $.ID_CS,
  $.ID_JS,
  $.ID_C,
),
aliasdecl: ($) => seq($.ALIAS, $.typeid, $.typeparams, $.kannot, "=", $.type, ),
typedecl: ($) => choice(
  seq($.typemod, $.TYPE, $.typeid, $.typeparams, $.kannot, $.typebody, ),
  seq($.structmod, $.STRUCT, $.typeid, $.typeparams, $.kannot, $.conparams, ),
  seq($.effectmod, $.EFFECT, $.varid, $.typeparams, $.kannot, $.opdecls, ),
  seq($.effectmod, $.EFFECT, $.typeparams, $.kannot, $.operation, ),
  seq($.NAMED, $.effectmod, $.EFFECT, $.varid, $.typeparams, $.kannot, $.opdecls, ),
  seq($.NAMED, $.effectmod, $.EFFECT, $.typeparams, $.kannot, $.operation, ),
  seq($.NAMED, $.effectmod, $.EFFECT, $.varid, $.typeparams, $.kannot, $.IN, $.type, $.opdecls, ),
),
typemod: ($) => choice(
  $.structmod,
  $.ID_OPEN,
  $.ID_EXTEND,
  $.ID_CO,
  $.ID_DIV,
  $.ID_LAZY,
),
structmod: ($) => optional(choice(
  $.ID_VALUE,
  $.ID_REFERENCE,
)),
effectmod: ($) => optional(choice(
  $.ID_DIV,
  $.ID_LINEAR,
  seq($.ID_LINEAR, $.ID_DIV, ),
)),
typebody: ($) => optional(seq("{", $.semis, $.constructors, "}", )),
typeid: ($) => choice(
  seq("(", $.commas, ")", ),
  seq("[", "]", ),
  seq("<", ">", ),
  seq("<", "|", ">", ),
  $.varid,
  $.CTX,
),
commas: ($) => optional($.commas1),
commas1: ($) => seq($.commas, ",", ),
constructors: ($) => optional(seq($.constructors1, $.semis1, )),
constructors1: ($) => choice(
  seq($.constructors1, $.semis1, $.constructor, ),
  $.constructor,
),
constructor: ($) => choice(
  seq($.pub, $.con, $.conid, $.typeparams, $.conparams, ),
  seq($.pub, $.ID_LAZY, $.con, $.conid, $.typeparams, $.conparams, $.RARROW, $.blockexpr, ),
),
con: ($) => optional($.CON),
conparams: ($) => optional(choice(
  seq("(", $.parameters1, ")", ),
  seq("{", $.semis, $.sconparams, "}", ),
)),
sconparams: ($) => optional(seq($.sconparams, $.parameter, $.semis1, )),
opdecls: ($) => seq("{", $.semis, $.operations, "}", ),
operations: ($) => optional(seq($.operations, $.operation, $.semis1, )),
operation: ($) => choice(
  seq($.pub, $.VAL, $.identifier, $.typeparams, ":", $.tatomic, ),
  seq($.pub, $.FUN, $.identifier, $.typeparams, "(", $.pparameters, ")", ":", $.tatomic, ),
  seq($.pub, $.controlmod, $.CTL, $.identifier, $.typeparams, "(", $.pparameters, ")", ":", $.tatomic, ),
),
puredecl: ($) => choice(
  seq($.inlinemod, $.VAL, $.binder, "=", $.blockexpr, ),
  seq($.inlinemod, $.fipmod, $.FUN, $.qidentifier, $.funbody, ),
),
inlinemod: ($) => optional(choice(
  $.ID_INLINE,
  $.ID_NOINLINE,
)),
fipmod: ($) => choice(
  seq($.tailmod, $.ID_FIP, $.fiplimit, ),
  seq($.tailmod, $.ID_FBIP, $.fiplimit, ),
  $.tailmod,
),
fiplimit: ($) => optional(choice(
  seq("(", $.INT, ")", ),
  seq("(", "_", ")", ),
)),
tailmod: ($) => optional($.ID_TAIL),
fundecl: ($) => seq($.identifier, $.funbody, ),
binder: ($) => choice(
  $.identifier,
  seq($.identifier, ":", $.type, ),
),
funbody: ($) => choice(
  seq($.typeparams, "(", $.pparameters, ")", $.bodyexpr, ),
  seq($.typeparams, "(", $.pparameters, ")", ":", $.tresult, $.qualifier, $.block, ),
),
annotres: ($) => optional(seq(":", $.tresult, )),
block: ($) => seq("{", $.semis, $.statements1, "}", ),
statements1: ($) => choice(
  seq($.statements1, $.statement, $.semis1, ),
  seq($.statement, $.semis1, ),
  seq($.error, $.semis1, ),
),
statement: ($) => choice(
  $.decl,
  $.withstat,
  seq($.withstat, $.IN, $.blockexpr, ),
  $.returnexpr,
  $.basicexpr,
),
decl: ($) => choice(
  seq($.FUN, $.fundecl, ),
  seq($.VAL, $.apattern, "=", $.blockexpr, ),
  seq($.VAR, $.binder, $.ASSIGN, $.blockexpr, ),
),
bodyexpr: ($) => choice(
  $.blockexpr,
  seq($.RARROW, $.blockexpr, ),
),
blockexpr: ($) => $.expr,
expr: ($) => choice(
  $.withexpr,
  $.block,
  $.returnexpr,
  $.valexpr,
  $.basicexpr,
),
basicexpr: ($) => choice(
  $.ifexpr,
  $.matchexpr,
  $.handlerexpr,
  $.fnexpr,
  $.opexpr,
),
matchexpr: ($) => choice(
  seq($.MATCH, $.ntlexpr, "{", $.semis, $.matchrules, "}", ),
  seq($.ID_LAZY, $.MATCH, $.ntlexpr, "{", $.semis, $.matchrules, "}", ),
),
fnexpr: ($) => seq($.FN, $.funbody, ),
returnexpr: ($) => seq($.RETURN, $.expr, ),
ifexpr: ($) => choice(
  seq($.IF, $.ntlexpr, $.THEN, $.blockexpr, $.elifs, ),
  seq($.IF, $.ntlexpr, $.THEN, $.blockexpr, ),
  seq($.IF, $.ntlexpr, $.RETURN, $.expr, ),
),
elifs: ($) => choice(
  seq($.ELIF, $.ntlexpr, $.THEN, $.blockexpr, $.elifs, ),
  seq($.ELSE, $.blockexpr, ),
),
valexpr: ($) => seq($.VAL, $.apattern, "=", $.blockexpr, $.IN, $.expr, ),
opexpr: ($) => choice(
  seq($.opexpr, $.qoperator, $.prefixexpr, ),
  $.prefixexpr,
),
prefixexpr: ($) => choice(
  seq("!", $.prefixexpr, ),
  seq("~", $.prefixexpr, ),
  $.appexpr,
),
appexpr: ($) => choice(
  seq($.appexpr, "(", $.arguments, ")", ),
  seq($.appexpr, "[", $.arguments, "]", ),
  seq($.appexpr, ".", $.name, ),
  seq($.appexpr, ".", "(", $.arguments, ")", ),
  seq($.appexpr, $.block, ),
  seq($.appexpr, $.fnexpr, ),
  $.atom,
),
ntlexpr: ($) => $.ntlopexpr,
ntlopexpr: ($) => choice(
  seq($.ntlopexpr, $.qoperator, $.ntlprefixexpr, ),
  $.ntlprefixexpr,
),
ntlprefixexpr: ($) => choice(
  seq("!", $.ntlprefixexpr, ),
  seq("~", $.ntlprefixexpr, ),
  $.ntlappexpr,
),
ntlappexpr: ($) => choice(
  seq($.ntlappexpr, "(", $.arguments, ")", ),
  seq($.ntlappexpr, "[", $.arguments, "]", ),
  seq($.ntlappexpr, ".", $.name, ),
  seq($.ntlappexpr, ".", "(", $.arguments, ")", ),
  $.atom,
),
atom: ($) => choice(
  $.name,
  $.literal,
  $.mask,
  seq("(", $.aexprs, ")", ),
  seq("[", $.cexprs, "]", ),
  $.ctxexpr,
  $.ctxhole,
),
name: ($) => choice(
  $.qidentifier,
  $.qconstructor,
  $.qimplicit,
),
literal: ($) => choice(
  $.INT,
  $.FLOAT,
  $.CHAR,
  $.STRING,
),
mask: ($) => seq($.MASK, $.behind, "<", $.tbasic, ">", ),
behind: ($) => optional($.ID_BEHIND),
ctxexpr: ($) => seq($.CTX, $.atom, ),
ctxhole: ($) => "_",
arguments: ($) => optional($.arguments1),
arguments1: ($) => choice(
  seq($.arguments1, ",", $.argument, ),
  $.argument,
),
argument: ($) => choice(
  $.expr,
  seq($.identifier, "=", $.expr, ),
  seq($.qimplicit, "=", $.expr, ),
),
parameters: ($) => optional($.parameters1),
parameters1: ($) => choice(
  seq($.parameters1, ",", $.parameter, ),
  $.parameter,
),
parameter: ($) => choice(
  seq($.borrow, $.paramid, ":", $.type, ),
  seq($.borrow, $.paramid, ":", $.type, "=", $.expr, ),
),
paramid: ($) => choice(
  $.identifier,
  $.wildcard,
),
borrow: ($) => optional("^"),
pparameters: ($) => optional($.pparameters1),
pparameters1: ($) => choice(
  seq($.pparameters1, ",", $.pparameter, ),
  $.pparameter,
),
pparameter: ($) => choice(
  seq($.borrow, $.pattern, ),
  seq($.borrow, $.pattern, ":", $.type, ),
  seq($.borrow, $.pattern, ":", $.type, "=", $.expr, ),
  seq($.borrow, $.pattern, "=", $.expr, ),
  seq($.borrow, $.qimplicit, ),
  seq($.borrow, $.qimplicit, ":", $.type, ),
),
aexprs: ($) => optional($.aexprs1),
aexprs1: ($) => choice(
  seq($.aexprs1, ",", $.aexpr, ),
  $.aexpr,
),
cexprs: ($) => choice(
  $.cexprs0,
  seq($.cexprs0, $.aexpr, ),
),
cexprs0: ($) => optional(seq($.cexprs0, $.aexpr, ",", )),
aexpr: ($) => seq($.expr, $.annot, ),
annot: ($) => optional(seq(":", $.typescheme, )),
qoperator: ($) => $.op,
qidentifier: ($) => choice(
  $.qvarid,
  $.QIDOP,
  $.identifier,
),
identifier: ($) => choice(
  $.varid,
  $.IDOP,
),
wildcard: ($) => choice(
  $.WILDCARDID,
  "_",
),
qimplicit: ($) => $.IMPLICITID,
qvarid: ($) => $.QID,
varid: ($) => choice(
  $.ID,
  $.ID_C,
  $.ID_CS,
  $.ID_JS,
  $.ID_FILE,
  $.ID_INLINE,
  $.ID_NOINLINE,
  $.ID_OPEN,
  $.ID_EXTEND,
  $.ID_LINEAR,
  $.ID_BEHIND,
  $.ID_VALUE,
  $.ID_REFERENCE,
  $.ID_SCOPED,
  $.ID_INITIALLY,
  $.ID_FINALLY,
  $.ID_DIV,
  $.ID_CO,
  $.ID_FIP,
  $.ID_FBIP,
  $.ID_TAIL,
  $.ID_LAZY,
),
qconstructor: ($) => choice(
  $.conid,
  $.qconid,
),
qconid: ($) => $.QCONID,
conid: ($) => $.CONID,
op: ($) => choice(
  $.OP,
  ">",
  "<",
  "|",
  $.ASSIGN,
),
matchrules: ($) => optional(seq($.matchrules1, $.semis1, )),
matchrules1: ($) => choice(
  seq($.matchrules1, $.semis1, $.matchrule, ),
  $.matchrule,
),
matchrule: ($) => choice(
  seq($.patterns1, "|", $.expr, $.RARROW, $.blockexpr, ),
  seq($.patterns1, $.RARROW, $.blockexpr, ),
),
patterns1: ($) => choice(
  seq($.patterns1, ",", $.pattern, ),
  $.pattern,
),
apatterns: ($) => optional($.apatterns1),
apatterns1: ($) => choice(
  seq($.apatterns1, ",", $.apattern, ),
  $.apattern,
),
apattern: ($) => seq($.pattern, $.annot, ),
pattern: ($) => choice(
  $.identifier,
  seq($.identifier, $.AS, $.pattern, ),
  $.conid,
  seq($.conid, "(", $.patargs, ")", ),
  seq("(", $.apatterns, ")", ),
  seq("[", $.apatterns, "]", ),
  $.literal,
  $.wildcard,
),
patargs: ($) => optional($.patargs1),
patargs1: ($) => choice(
  seq($.patargs, ",", $.patarg, ),
  $.patarg,
),
patarg: ($) => choice(
  seq($.identifier, "=", $.apattern, ),
  $.apattern,
),
handlerexpr: ($) => choice(
  seq($.override, $.HANDLER, $.witheff, $.opclauses, ),
  seq($.override, $.HANDLE, $.witheff, $.ntlexpr, $.opclauses, ),
  seq($.NAMED, $.HANDLER, $.witheff, $.opclauses, ),
  seq($.NAMED, $.HANDLE, $.witheff, $.ntlexpr, $.opclauses, ),
),
override: ($) => optional($.OVERRIDE),
witheff: ($) => optional(seq("<", $.anntype, ">", )),
withstat: ($) => choice(
  seq($.WITH, $.basicexpr, ),
  seq($.WITH, $.binder, $.LARROW, $.basicexpr, ),
  seq($.WITH, $.override, $.witheff, $.opclause, ),
  seq($.WITH, $.binder, $.LARROW, $.witheff, $.opclause, ),
),
withexpr: ($) => seq($.withstat, $.IN, $.blockexpr, ),
opclauses: ($) => choice(
  seq("{", $.semis, $.opclauses1, $.semis1, "}", ),
  seq("{", $.semis, "}", ),
),
opclauses1: ($) => choice(
  seq($.opclauses1, $.semis1, $.opclausex, ),
  $.opclausex,
),
opclausex: ($) => choice(
  seq($.ID_FINALLY, $.bodyexpr, ),
  seq($.ID_INITIALLY, "(", $.opparam, ")", $.bodyexpr, ),
  $.opclause,
),
opclause: ($) => choice(
  seq($.VAL, $.qidentifier, "=", $.blockexpr, ),
  seq($.VAL, $.qidentifier, ":", $.type, "=", $.blockexpr, ),
  seq($.FUN, $.qidentifier, $.opparams, $.bodyexpr, ),
  seq($.controlmod, $.CTL, $.qidentifier, $.opparams, $.bodyexpr, ),
  seq($.RETURN, "(", $.opparam, ")", $.bodyexpr, ),
),
controlmod: ($) => optional(choice(
  $.FINAL,
  $.RAW,
)),
opparams: ($) => seq("(", $.opparams0, ")", ),
opparams0: ($) => optional($.opparams1),
opparams1: ($) => choice(
  seq($.opparams1, ",", $.opparam, ),
  $.opparam,
),
opparam: ($) => choice(
  $.paramid,
  seq($.paramid, ":", $.type, ),
),
tbinders: ($) => optional($.tbinders1),
tbinders1: ($) => choice(
  seq($.tbinders1, ",", $.tbinder, ),
  $.tbinder,
),
tbinder: ($) => seq($.varid, $.kannot, ),
typescheme: ($) => seq($.someforalls, $.tarrow, $.qualifier, ),
type: ($) => choice(
  seq($.FORALL, $.typeparams1, $.tarrow, $.qualifier, ),
  seq($.tarrow, $.qualifier, ),
),
someforalls: ($) => optional(choice(
  seq($.SOME, $.typeparams1, $.FORALL, $.typeparams1, ),
  seq($.SOME, $.typeparams1, ),
  seq($.FORALL, $.typeparams1, ),
)),
typeparams: ($) => optional($.typeparams1),
typeparams1: ($) => seq("<", $.tbinders, ">", ),
qualifier: ($) => optional(seq($.WITH, "(", $.predicates1, ")", )),
predicates1: ($) => choice(
  seq($.predicates1, ",", $.predicate, ),
  $.predicate,
),
predicate: ($) => $.typeapp,
tarrow: ($) => choice(
  seq($.tatomic, $.RARROW, $.tresult, ),
  $.tatomic,
),
tresult: ($) => choice(
  seq($.tatomic, $.tbasic, ),
  $.tatomic,
),
tatomic: ($) => choice(
  $.tbasic,
  seq("<", $.targuments1, "|", $.tatomic, ">", ),
  seq("<", $.targuments, ">", ),
),
tbasic: ($) => choice(
  $.typeapp,
  seq("(", $.tparams, ")", ),
  seq("[", $.anntype, "]", ),
),
typeapp: ($) => choice(
  $.typecon,
  seq($.typecon, "<", $.targuments, ">", ),
),
typecon: ($) => choice(
  $.varid,
  $.qvarid,
  $.wildcard,
  seq("(", $.commas1, ")", ),
  seq("[", "]", ),
  seq("(", $.RARROW, ")", ),
  $.CTX,
),
tparams: ($) => optional($.tparams1),
tparams1: ($) => choice(
  seq($.tparams1, ",", $.tparam, ),
  $.tparam,
),
tparam: ($) => choice(
  seq($.identifier, ":", $.anntype, ),
  $.anntype,
),
targuments: ($) => optional($.targuments1),
targuments1: ($) => choice(
  seq($.targuments1, ",", $.anntype, ),
  $.anntype,
),
anntype: ($) => seq($.type, $.kannot, ),
kannot: ($) => optional(seq($.DCOLON, $.kind, )),
kind: ($) => choice(
  seq("(", $.kinds1, ")", $.RARROW, $.katom, ),
  seq($.katom, $.RARROW, $.kind, ),
  $.katom,
),
kinds1: ($) => choice(
  seq($.kinds1, ",", $.kind, ),
  $.kind,
),
katom: ($) => $.conid,
